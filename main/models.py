from django.db import models
from django.contrib.auth.models import UserManager, AbstractUser

# class CustomUser(AbstractUser):
#     pass

WEEK_DAY = {
    0: 'Понедельник',
    1: 'Вторник',
    2: 'Среда',
    3: 'Четверг',
    4: 'Пятница',
    5: 'Суббота',
    6: 'Воскресенье'
}

# Нагрузка для классов по санпину
WORK_LOAD = {
    "1": {        
        "математика": 8,        
        "русский язык": 7,        
        "информатика": 6,
        "природоведение": 6,
        "русская литература": 5,
        "история": 4,
        "рисование": 3,
        "музыка": 3,
        "труд": 2,
        "физическая культура": 1,        
    },
    "2": {        
        "математика": 8,        
        "русский язык": 7,        
        "информатика": 6,
        "природоведение": 6,
        "русская литература": 5,
        "история": 4,
        "рисование": 3,
        "музыка": 3,
        "труд": 2,
        "физическая культура": 1,        
    },
    "3": {        
        "математика": 8,        
        "русский язык": 7,        
        "информатика": 6,
        "природоведение": 6,
        "русская литература": 5,
        "история": 4,
        "рисование": 3,
        "музыка": 3,
        "труд": 2,
        "физическая культура": 1,        
    },
    "4": {        
        "математика": 8,        
        "русский язык": 7,        
        "информатика": 6,
        "природоведение": 6,
        "русская литература": 5,
        "история": 4,
        "рисование": 3,
        "музыка": 3,
        "труд": 2,
        "физическая культура": 1,        
    },
    "5":{
        "биология": 10,
        "математика": 10,
        "английский язык": 9,
        "русский язык": 8,
        "краеведение": 7,
        "природоведение": 7,
        "граждановедение": 6,
        "история": 5,
        "ритмика": 4,
        "труд": 4,
        "литература": 4,
        "изо": 3,
        "физическая культура": 3,
        "экология": 3,
        "музыка": 2,
        "информатика": 4,
        "обж": 1,
    },
    "6":{
        "биология": 8,
        "математика": 13,
        "английский язык": 11,
        "русский язык": 12,
        "краеведение": 9,
        "природоведение": 8,
        "география": 7,
        "граждановедение": 9,        
        "история": 8,
        "ритмика": 4,
        "труд": 3,
        "литература": 6,
        "изо": 3,
        "физическая культура": 4,
        "экология": 3,
        "музыка": 1,
        "информатика": 10,
        "обж": 2,
    },
    "7":{
        "химия": 13,
        "геометрия": 12,
        "физика": 8,
        "алгебра": 10,
        "мировая художественная культура": 8,
        "биология": 7,        
        "английский язык": 10,
        "русский язык": 11,
        "краеведение": 5,        
        "география": 6,
        "граждановедение": 9,
        "история": 6,        
        "труд": 2,
        "литература": 4,
        "изо": 1,
        "физическая культура": 2,
        "экология": 3,
        "музыка": 1,
        "информатика": 4,
        "обж": 3,
    },
    "8":{
        "химия": 10,
        "геометрия": 10,
        "физика": 9,
        "алгебра": 9,
        "черчение": 5,
        "мировая художественная культура": 5,
        "биология": 7,        
        "английский язык": 8,
        "русский язык": 7,
        "краеведение": 5,        
        "география": 6,
        "граждановедение": 5,
        "история": 8,        
        "труд": 1,
        "литература": 4,
        "изо": 3,
        "физическая культура": 2,
        "экология": 6,
        "музыка": 1,
        "информатика": 7,
        "обж": 3,
    },
    "9":{
        "химия": 12,
        "геометрия": 8,
        "физика": 13,
        "алгебра": 7,
        "экономика": 11,
        "черчение": 4,
        "мировая художественная культура": 5,
        "биология": 7,        
        "английский язык": 9,
        "русский язык": 6,       
        "география": 5,
        "история": 10,        
        "труд": 4,
        "литература": 7,        
        "физическая культура": 2,
        "экология": 1,        
        "информатика": 7,
        "обж": 3,
    },
    "10":{
        "химия": 11,
        "геометрия": 11,
        "физика": 12,
        "алгебра": 10,
        "экономика": 6,
        "черчение": 4,
        "мировая художественная культура": 5,
        "биология": 7,        
        "обществознание": 5,        
        "английский язык": 8,
        "русский язык": 9,       
        "география": 3,
        "история": 5,        
        "труд": 4,
        "литература": 8,        
        "физическая культура": 1,
        "экология": 3,        
        "информатика": 6,
        "обж": 2,
        "краеведение": 2,
        "астрономия": 4,
    },
    "11":{
        "химия": 11,
        "геометрия": 11,
        "физика": 12,
        "алгебра": 10,
        "экономика": 6,
        "черчение": 4,
        "мировая художественная культура": 5,
        "биология": 7,        
        "обществознание": 5,        
        "английский язык": 8,
        "русский язык": 9,       
        "география": 3,
        "история": 5,        
        "труд": 4,
        "литература": 8,        
        "физическая культура": 1,
        "экология": 3,        
        "информатика": 6,
        "обж": 2,
        "краеведение": 2,
        "астрономия": 4,
    },
}


class Group(models.Model):
    name = models.CharField(max_length=100)    

    def __str__(self):
        return self.name

class Subject(models.Model):
    name = models.CharField(max_length=100)    

    def __str__(self):
        return self.name

class Classroom(models.Model):
    name = models.CharField(max_length=100, default="Нет имени")    

    def __str__(self):
        return self.name
    
    
class Teacher(models.Model):
    name = models.CharField(max_length=100)            

    def __str__(self):
        return self.name


# Это таблица для составления расписания
class Class(models.Model):
    groups = models.ManyToManyField(Group)
    teacher = models.ForeignKey('Teacher', on_delete=models.CASCADE)
    subject = models.ForeignKey('Subject', on_delete=models.CASCADE)        
    classrooms = models.ManyToManyField(Classroom)
    max_lessons = models.IntegerField(default=1)
    points = models.IntegerField(default=1)

    def __str__(self):
        groups_str = ""
        for group in self.groups.all():
            groups_str += group.name + ", "
        return self.subject.name + " | " + groups_str
    

# Это таблица для показа расписания
class ScheduleClass(models.Model):
    weekday = models.IntegerField(default=0)
    lesson_index = models.IntegerField(default=0)
    group = models.ForeignKey('Group', on_delete=models.CASCADE)
    teacher = models.ForeignKey('Teacher', on_delete=models.CASCADE)
    subject = models.ForeignKey('Subject', on_delete=models.CASCADE)        
    classroom = models.ForeignKey('Classroom', on_delete=models.CASCADE)

    def __str__(self):
        return WEEK_DAY[self.weekday] + " | " + str(self.lesson_index) + " урок | " + self.group.name
    

class TestTable(models.Model):
    name = models.TextField(default="")

    def __str__(self):
        return self.class_name